CI CONCENTRIAMO SULLA PARTE DI SOLIDITY E ETHER.JS

1) installiamo react con npx create-react-app xxx

2) installiamo hardhat e i pacchetti openzeppelin con npm i -d hardhat
npx hardhat (enter, enter, enter, enter)
npm i @openzeppelin/contracts

3) Installiamo Chakra, (guarda nelle guide)

INIZIAMO IL CODING

4) Creiamo lo smart contract...”nft.sol” nello standard erc721


// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract InsiderArmyNFT is ERC721, Ownable {

        uint256 public mintPrice;
        uint256 public totalSupply;
        uint256 public maxSupply;
        uint256 public maxPerWallet;
        bool public isPublicMintEnabled;
        string internal baseTokenUri;
        address payable public withdrawWallet;
        mapping (address => uint256) walletMints;
       
       constructor() payable ERC721("InsiderArmy", "IA"){
        totalSupply = 0;
        maxSupply = 1000;
        maxPerWallet = 3;
        mintPrice = 0.02 ether;

        //set withdraw wallet/s address
       }

       function setIsPublicMintEnabled(bool isPublicMintEnabled_) external onlyOwner{
        isPublicMintEnabled = isPublicMintEnabled_; 
       }

       function setBaseTokenUri( string calldata baseTokenUri_) external onlyOwner {
        baseTokenUri = baseTokenUri_;
       }

       function tokenURI(uint256 tokenId_) public view override returns (string memory){
        require(_exists(tokenId_), "token ID not exist!");
        return string(abi.encodePacked(baseTokenUri, Strings.toString(tokenId_), ".json"));
       }

       function withdraw() external onlyOwner{
        (bool success, ) = withdrawWallet.call{value: address(this).balance}("");
        require(success, "withdraw failed");
       }

       function mint(uint256 quantity_) public payable {
        require(isPublicMintEnabled, "minting not enables");
        require(totalSupply + quantity_ <= maxSupply, "sold out");
        require(walletMints[msg.sender] <= quantity_, "You already have too many NFTs");
        require(msg.value == quantity_* mintPrice, "not enought founds");

        for(uint256 i=0; i < quantity_; i++) {
               uint256 newTokenId = totalSupply + 1;
                totalSupply++;
                _safeMint(msg.sender, newTokenId);

        }

       }

}

1. Ora deploiamo lo smart contract sulla testnet. Quindi andiamo su infura e creaiamo un nuovo progetto. 
2. Ora creiamo un nuovo file .env con le informazioni prese da infura:
 REACT_APP_GOERLI_RPC_URL=""

Mentre le prossime informazioni le prendiamo dalla sezione API di etherscan 

REACT_APP_ETHERSCAN_KEY=""

e prendiamo anche la private Key del nostro metamask.

REACT_APP_PRIVATE_KEY=""

3. ora installiamo npm i -D dotnev che ci permette di installare il nostro pacchetto







4. Ora configuriamo il nostro hardhat.config.js: (puoi trovare queste informazioni nei documenti di darhat https://hardhat.org/tutorial/deploying-to-a-live-network)

	
require("@nomiclabs/hardhat-waffle");
require("@nomiclabs/hardhat-etherscan");
const PrivateKey ="";
const dotenv = require("dotenv");
dotenv.config();

/** @type import('hardhat/config').HardhatUserConfig */

task("accounts", "Prints the list of accounts", async (taskArgs, hre) => {
    const accounts = await hre.ethers.getSigners();
    
    for(const account of accounts){
        console.log(account.address);
    }
});

module.exports = {
    solidity: "0.8.4",
    networks:{
        goerli: {
            chainId:5,
            url:"",
            accounts: [PrivateKey],
        },
    },
    etherscan:{
        apiKey:"",
    }
};

ora 
npx hardhat clean
npx hardhat compile
npx hardhat run scripts/(filedel progetto).js --network goerli  questo ci fornisce il contract address

Una volta che hai il contract address vai su etherscan e sulla rete di test corretta e cerca quel contratto, ora bisogna eseguire la procedura di verifica
installa npm i -D @nomiclabs/hardhat-etherscan
npx hardhat verify --network goerli (contratto di etherscan)
Ora vai su etherscan e dovresti vedere il contratto e poterlo leggere e write.

Ora andiamo su vscode e creiamo un file “esempio.json” andiamo nella cartella artifacts e poi nella cartella contracts ed entriamo nel file Progetto.json e copiamo tutto quello che c'è dentro e lo copiamo in un nuovo file all'interno di src, sempre un file Esempio.json.





ORA COSTRUIAMO LA DAPP.

APP
import { useState } from 'react';
import './App.css';
import MainMint from "./MainMint.js";
import NavBar from "./NavBar.js";

function App() {
const[accounts, setAccounts] = useState([]);

    return (
        <div className='overlay' >
            <div className="App">
                <NavBar accounts = {accounts} setAccounts={setAccounts}/>
                <MainMint accounts = {accounts} setAccounts={setAccounts}/>
            </div>
            <div className='background-a' ></div>
            
        </div>
    );
}

export default App;





NAVBAR.

Nella navbar passiamo l'hook  creato nell'app principale e creiamo una funzione che si connetta a metamask e permetta all'account di loggare.

Creiamo una variabile per verificare che un account sia connesso:


Const NavBar = ({ accounts, setAccounts}) => {
const isConnected = Boolean(accounts[0]);}

Creiamo una funzione per collegarci a metamask dell'utente e connettersi
async function connectAccount(){
if (window.ethereum) { 
const accounts = await window.ethereum.request({method: “eth_requestAccounts”,});setAccounts(accounts);}}

ora diciamo che se l'account è connesso allora mostriamo un messaggio altrimenti ci sarà un bottone per connettersi:

{isConnected ? ( <p> Connected</p>) : ( <button onClick={connectAccount}>Connect</button>)}




